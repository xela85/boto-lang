/*
 * generated by Xtext 2.10.0
 */
package org.emn.fil.boto.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.emn.fil.boto.botoLang.Model
import org.emn.fil.boto.botoLang.Goto
import org.emn.fil.boto.botoLang.Click
import org.emn.fil.boto.botoLang.Fill
import org.emn.fil.boto.botoLang.Check
import org.emn.fil.boto.botoLang.Predicate
import org.emn.fil.boto.botoLang.Put
import org.emn.fil.boto.botoLang.FunctionCall
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.emn.fil.boto.botoLang.Html
import org.emn.fil.boto.botoLang.InstructionList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BotoLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {		
		val model= resource.allContents
				.filter(typeof(Model))
				.head	
		var text = '''
		package fr.emn.fil.boto.sample;
		
		
		import org.openqa.selenium.By;
		import org.openqa.selenium.WebDriver;
		import org.openqa.selenium.WebElement;
		import org.openqa.selenium.chrome.ChromeDriver;
		import org.openqa.selenium.firefox.FirefoxDriver;
		import org.openqa.selenium.support.ui.Select;
		
		public class Sample {
		    
		'''
		
		if(model.functions.size > 0) {
			text += model.functions.map[function | 
				'''
				private static void «function.name»(WebDriver driver«IF function.variables.size > 0», «ENDIF»«function.variables.map["Object " + it.name].reduce[p1, p2| p1 + ", " + p2]») {
					«transformInstructionList(function.instructions)»
				}
				'''
			].reduce[p1, p2| p1 + "\n" + p2]
		}
		
		text += '''
		public static void main( String[] args ) throws InterruptedException {
				    	System.setProperty("webdriver.gecko.driver", "C:\\Dev\\_soft\\selenium\\geckodriver.exe");
				    	System.setProperty("webdriver.chrome.driver", "C:\\Dev\\_soft\\selenium\\chromedriver.exe");
				    	WebDriver driver;
    	'''
		
		
		text += model.browsers.map[browser |
			 
			'''
			driver = «IF browser.name == "Chrome"» new ChromeDriver(); «ELSE» new FirefoxDriver(); «ENDIF»
			«transformInstructionList(browser.instructions)»
			'''
			].reduce[p1, p2| p1 + "\n" + p2]
		
		text += '''
				}
			}
		'''
		
		fsa.generateFile("fr/emn/fil/boto/sample/Sample.java", text)
	}



	def String transform(EObject instruction) {
		if(instruction instanceof Goto) {
			val goto = instruction as Goto
			return '''
				driver.get("«goto.url»");
			'''
		}
		if(instruction instanceof Click) {
			val click = instruction as Click
			return '''
				«transformObject(click.object)».click();
			'''
		}
		if(instruction instanceof Fill) {
			val fill = instruction as Fill
			return '''
				«transformObject(fill.object)».sendKeys("«fill.value»");
			'''
		}
		if(instruction instanceof Check) {
			val check = instruction as Check
			return '''
				assert true;
			'''
		}
		if(instruction instanceof Put) {
			val put = instruction as Put 
			var value = ""
			if(put.string == null || put.string.isEmpty) {
		    	value = '''	
		    		«transformObject(put.object)»
		    	'''
			} else value = '''"«put.string»"''' 
			
			return '''
				Object «put.variable.name» = «value»;
			'''
		}
		if(instruction instanceof FunctionCall) {
			val call = instruction as FunctionCall
			return '''
				«call.name.name»(driver«IF call.variables.size > 0», «ENDIF»«call.variables.map[name].reduce[p1, p2| p1 + ", " + p2]»);
			'''
		}
		""
	}

	def String transformObject(org.emn.fil.boto.botoLang.Object object) {
		val html = object.html
	
		if(html == null)
			return '''((WebElement) «object.variable.name»)''' 
		
		if(html.tag == "button") {
			'''driver.findElement(By.cssSelector("input[value=\"«object.param»\"]"))'''			
		}
		else if(html.tag == "field") {
			'''driver.findElement(By.name("«object.param»"))'''
		}
		else if (html.tag == "link") {
			'''driver.findElement(By.linkText("«object.param»"))'''
		}
		else "null" // AHAH
	}
	
	def String transformInstructionList(InstructionList instructionList) {
		'''
			«instructionList.instructions.map[i | transform(i)].reduce[p1, p2| p1 + '''
				Thread.sleep(1000);
			''' + p2]»
		'''
	}
	
	
		
}
