/*
 * generated by Xtext 2.10.0
 */
package org.emn.fil.boto.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BotoLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cBrowsersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowsersBrowserParserRuleCall_1_0 = (RuleCall)cBrowsersAssignment_1.eContents().get(0);
		
		//Model:
		//	functions+=Function*
		//	browsers+=Browser*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function* browsers+=Browser*
		public Group getGroup() { return cGroup; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0_0() { return cFunctionsFunctionParserRuleCall_0_0; }
		
		//browsers+=Browser*
		public Assignment getBrowsersAssignment_1() { return cBrowsersAssignment_1; }
		
		//Browser
		public RuleCall getBrowsersBrowserParserRuleCall_1_0() { return cBrowsersBrowserParserRuleCall_1_0; }
	}
	public class BrowserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Browser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBrowserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionListParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Browser:
		//	'browser' name=STRING '{'
		//	instructions=InstructionList
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'browser' name=STRING '{' instructions=InstructionList '}'
		public Group getGroup() { return cGroup; }
		
		//'browser'
		public Keyword getBrowserKeyword_0() { return cBrowserKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//instructions=InstructionList
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }
		
		//InstructionList
		public RuleCall getInstructionsInstructionListParserRuleCall_3_0() { return cInstructionsInstructionListParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InstructionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.InstructionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstructionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cInstructionsAlternatives_0_0 = (Alternatives)cInstructionsAssignment_0.eContents().get(0);
		private final RuleCall cInstructionsGotoParserRuleCall_0_0_0 = (RuleCall)cInstructionsAlternatives_0_0.eContents().get(0);
		private final RuleCall cInstructionsClickParserRuleCall_0_0_1 = (RuleCall)cInstructionsAlternatives_0_0.eContents().get(1);
		private final RuleCall cInstructionsCheckParserRuleCall_0_0_2 = (RuleCall)cInstructionsAlternatives_0_0.eContents().get(2);
		private final RuleCall cInstructionsFillParserRuleCall_0_0_3 = (RuleCall)cInstructionsAlternatives_0_0.eContents().get(3);
		private final RuleCall cInstructionsPutParserRuleCall_0_0_4 = (RuleCall)cInstructionsAlternatives_0_0.eContents().get(4);
		private final RuleCall cInstructionsFunctionCallParserRuleCall_0_0_5 = (RuleCall)cInstructionsAlternatives_0_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InstructionList:
		//	(instructions+=(Goto | Click | Check | Fill | Put | FunctionCall) ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//(instructions+=(Goto | Click | Check | Fill | Put | FunctionCall) ";")*
		public Group getGroup() { return cGroup; }
		
		//instructions+=(Goto | Click | Check | Fill | Put | FunctionCall)
		public Assignment getInstructionsAssignment_0() { return cInstructionsAssignment_0; }
		
		//(Goto | Click | Check | Fill | Put | FunctionCall)
		public Alternatives getInstructionsAlternatives_0_0() { return cInstructionsAlternatives_0_0; }
		
		//Goto
		public RuleCall getInstructionsGotoParserRuleCall_0_0_0() { return cInstructionsGotoParserRuleCall_0_0_0; }
		
		//Click
		public RuleCall getInstructionsClickParserRuleCall_0_0_1() { return cInstructionsClickParserRuleCall_0_0_1; }
		
		//Check
		public RuleCall getInstructionsCheckParserRuleCall_0_0_2() { return cInstructionsCheckParserRuleCall_0_0_2; }
		
		//Fill
		public RuleCall getInstructionsFillParserRuleCall_0_0_3() { return cInstructionsFillParserRuleCall_0_0_3; }
		
		//Put
		public RuleCall getInstructionsPutParserRuleCall_0_0_4() { return cInstructionsPutParserRuleCall_0_0_4; }
		
		//FunctionCall
		public RuleCall getInstructionsFunctionCallParserRuleCall_0_0_5() { return cInstructionsFunctionCallParserRuleCall_0_0_5; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		////////////////////
		//// Instructions //
		////////////////////
		//Goto:
		//	"goto" url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" url=STRING
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_1_0 = (RuleCall)cObjectAssignment_1.eContents().get(0);
		
		//Click:
		//	"click" object=Object;
		@Override public ParserRule getRule() { return rule; }
		
		//"click" object=Object
		public Group getGroup() { return cGroup; }
		
		//"click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//object=Object
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_1_0() { return cObjectObjectParserRuleCall_1_0; }
	}
	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_1_0 = (RuleCall)cObjectAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Fill:
		//	"fill" object=Object "with" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"fill" object=Object "with" value=STRING
		public Group getGroup() { return cGroup; }
		
		//"fill"
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//object=Object
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_1_0() { return cObjectObjectParserRuleCall_1_0; }
		
		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_1_0 = (RuleCall)cObjectAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicatePredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//Check:
		//	"check" object=Object predicate=Predicate;
		@Override public ParserRule getRule() { return rule; }
		
		//"check" object=Object predicate=Predicate
		public Group getGroup() { return cGroup; }
		
		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//object=Object
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_1_0() { return cObjectObjectParserRuleCall_1_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_2_0() { return cPredicatePredicateParserRuleCall_2_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeywordAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cKeywordContainsKeyword_0_0_0 = (Keyword)cKeywordAssignment_0_0.eContents().get(0);
		private final Assignment cNotAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNotNotKeyword_0_1_0 = (Keyword)cNotAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cStringValueAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_0_2_0_0 = (RuleCall)cStringValueAssignment_0_2_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0_2_1_0 = (CrossReference)cVariableAssignment_0_2_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cVariableVariableCrossReference_0_2_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cKeywordAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cKeywordLengthKeyword_1_0_0 = (Keyword)cKeywordAssignment_1_0.eContents().get(0);
		private final Assignment cSecondKeywordAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSecondKeywordAlternatives_1_1_0 = (Alternatives)cSecondKeywordAssignment_1_1.eContents().get(0);
		private final Keyword cSecondKeywordEqualsSignKeyword_1_1_0_0 = (Keyword)cSecondKeywordAlternatives_1_1_0.eContents().get(0);
		private final Keyword cSecondKeywordGreaterThanSignKeyword_1_1_0_1 = (Keyword)cSecondKeywordAlternatives_1_1_0.eContents().get(1);
		private final Keyword cSecondKeywordLessThanSignKeyword_1_1_0_2 = (Keyword)cSecondKeywordAlternatives_1_1_0.eContents().get(2);
		private final Keyword cSecondKeywordGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cSecondKeywordAlternatives_1_1_0.eContents().get(3);
		private final Keyword cSecondKeywordLessThanSignEqualsSignKeyword_1_1_0_4 = (Keyword)cSecondKeywordAlternatives_1_1_0.eContents().get(4);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//Predicate:
		//	keyword="contains" not="not"? (stringValue=STRING | variable=[Variable]) | keyword="length" secondKeyword=("=" | ">"
		//	| "<" | ">=" | "<=") value+=INT+;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword="contains" not="not"? (stringValue=STRING | variable=[Variable]) | keyword="length" secondKeyword=("=" | ">" |
		//"<" | ">=" | "<=") value+=INT+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//keyword="contains" not="not"? (stringValue=STRING | variable=[Variable])
		public Group getGroup_0() { return cGroup_0; }
		
		//keyword="contains"
		public Assignment getKeywordAssignment_0_0() { return cKeywordAssignment_0_0; }
		
		//"contains"
		public Keyword getKeywordContainsKeyword_0_0_0() { return cKeywordContainsKeyword_0_0_0; }
		
		//not="not"?
		public Assignment getNotAssignment_0_1() { return cNotAssignment_0_1; }
		
		//"not"
		public Keyword getNotNotKeyword_0_1_0() { return cNotNotKeyword_0_1_0; }
		
		//(stringValue=STRING | variable=[Variable])
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//stringValue=STRING
		public Assignment getStringValueAssignment_0_2_0() { return cStringValueAssignment_0_2_0; }
		
		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_0_2_0_0() { return cStringValueSTRINGTerminalRuleCall_0_2_0_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_0_2_1() { return cVariableAssignment_0_2_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0_2_1_0() { return cVariableVariableCrossReference_0_2_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_2_1_0_1() { return cVariableVariableIDTerminalRuleCall_0_2_1_0_1; }
		
		//keyword="length" secondKeyword=("=" | ">" | "<" | ">=" | "<=") value+=INT+
		public Group getGroup_1() { return cGroup_1; }
		
		//keyword="length"
		public Assignment getKeywordAssignment_1_0() { return cKeywordAssignment_1_0; }
		
		//"length"
		public Keyword getKeywordLengthKeyword_1_0_0() { return cKeywordLengthKeyword_1_0_0; }
		
		//secondKeyword=("=" | ">" | "<" | ">=" | "<=")
		public Assignment getSecondKeywordAssignment_1_1() { return cSecondKeywordAssignment_1_1; }
		
		//("=" | ">" | "<" | ">=" | "<=")
		public Alternatives getSecondKeywordAlternatives_1_1_0() { return cSecondKeywordAlternatives_1_1_0; }
		
		//"="
		public Keyword getSecondKeywordEqualsSignKeyword_1_1_0_0() { return cSecondKeywordEqualsSignKeyword_1_1_0_0; }
		
		//">"
		public Keyword getSecondKeywordGreaterThanSignKeyword_1_1_0_1() { return cSecondKeywordGreaterThanSignKeyword_1_1_0_1; }
		
		//"<"
		public Keyword getSecondKeywordLessThanSignKeyword_1_1_0_2() { return cSecondKeywordLessThanSignKeyword_1_1_0_2; }
		
		//">="
		public Keyword getSecondKeywordGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cSecondKeywordGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//"<="
		public Keyword getSecondKeywordLessThanSignEqualsSignKeyword_1_1_0_4() { return cSecondKeywordLessThanSignEqualsSignKeyword_1_1_0_4; }
		
		//value+=INT+
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_2_0() { return cValueINTTerminalRuleCall_1_2_0; }
	}
	public class PutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Put");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cObjectObjectParserRuleCall_1_0_0 = (RuleCall)cObjectAssignment_1_0.eContents().get(0);
		private final Assignment cStringAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cStringAssignment_1_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//Put:
		//	"put" (object=Object | string=STRING) "in" variable=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//"put" (object=Object | string=STRING) "in" variable=Variable
		public Group getGroup() { return cGroup; }
		
		//"put"
		public Keyword getPutKeyword_0() { return cPutKeyword_0; }
		
		//(object=Object | string=STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//object=Object
		public Assignment getObjectAssignment_1_0() { return cObjectAssignment_1_0; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_1_0_0() { return cObjectObjectParserRuleCall_1_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1_1() { return cStringAssignment_1_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_1_0() { return cStringSTRINGTerminalRuleCall_1_1_0; }
		
		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Object");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cHtmlAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cHtmlHtmlParserRuleCall_0_0_0 = (RuleCall)cHtmlAssignment_0_0.eContents().get(0);
		private final Assignment cParamAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParamSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cParamAssignment_0_1.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_0.eContents().get(1);
		
		//Object:
		//	html=Html param=STRING | variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//html=Html param=STRING | variable=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//html=Html param=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//html=Html
		public Assignment getHtmlAssignment_0_0() { return cHtmlAssignment_0_0; }
		
		//Html
		public RuleCall getHtmlHtmlParserRuleCall_0_0_0() { return cHtmlHtmlParserRuleCall_0_0_0; }
		
		//param=STRING
		public Assignment getParamAssignment_0_1() { return cParamAssignment_0_1; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_0_1_0() { return cParamSTRINGTerminalRuleCall_0_1_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_1_0() { return cVariableVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_0_1() { return cVariableVariableIDTerminalRuleCall_1_0_1; }
	}
	public class HtmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Html");
		private final Assignment cTagAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTagAlternatives_0 = (Alternatives)cTagAssignment.eContents().get(0);
		private final Keyword cTagButtonKeyword_0_0 = (Keyword)cTagAlternatives_0.eContents().get(0);
		private final Keyword cTagFieldKeyword_0_1 = (Keyword)cTagAlternatives_0.eContents().get(1);
		private final Keyword cTagLinkKeyword_0_2 = (Keyword)cTagAlternatives_0.eContents().get(2);
		
		//Html:
		//	tag=("button" | "field" | "link");
		@Override public ParserRule getRule() { return rule; }
		
		//tag=("button" | "field" | "link")
		public Assignment getTagAssignment() { return cTagAssignment; }
		
		//("button" | "field" | "link")
		public Alternatives getTagAlternatives_0() { return cTagAlternatives_0; }
		
		//"button"
		public Keyword getTagButtonKeyword_0_0() { return cTagButtonKeyword_0_0; }
		
		//"field"
		public Keyword getTagFieldKeyword_0_1() { return cTagFieldKeyword_0_1; }
		
		//"link"
		public Keyword getTagLinkKeyword_0_2() { return cTagLinkKeyword_0_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_3_0_0_0 = (RuleCall)cVariablesAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cVariablesAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_3_0_1_1_0 = (RuleCall)cVariablesAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cInstructionsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cInstructionsInstructionListParserRuleCall_3_3_0 = (RuleCall)cInstructionsAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		////////////////////
		////   Functions  //
		////////////////////
		//Function:
		//	"def" name=ID "(" ((variables+=Variable ("," variables+=Variable)*)? ")" "{"
		//	instructions=InstructionList
		//	"}");
		@Override public ParserRule getRule() { return rule; }
		
		//"def" name=ID "(" ((variables+=Variable ("," variables+=Variable)*)? ")" "{" instructions=InstructionList "}")
		public Group getGroup() { return cGroup; }
		
		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//((variables+=Variable ("," variables+=Variable)*)? ")" "{" instructions=InstructionList "}")
		public Group getGroup_3() { return cGroup_3; }
		
		//(variables+=Variable ("," variables+=Variable)*)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_3_0_0() { return cVariablesAssignment_3_0_0; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_0_0_0() { return cVariablesVariableParserRuleCall_3_0_0_0; }
		
		//("," variables+=Variable)*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_3_0_1_0() { return cCommaKeyword_3_0_1_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_3_0_1_1() { return cVariablesAssignment_3_0_1_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_0_1_1_0() { return cVariablesVariableParserRuleCall_3_0_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_1() { return cRightParenthesisKeyword_3_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_2() { return cLeftCurlyBracketKeyword_3_2; }
		
		//instructions=InstructionList
		public Assignment getInstructionsAssignment_3_3() { return cInstructionsAssignment_3_3; }
		
		//InstructionList
		public RuleCall getInstructionsInstructionListParserRuleCall_3_3_0() { return cInstructionsInstructionListParserRuleCall_3_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emn.fil.boto.BotoLang.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameFunctionCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cNameFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_2_0_0 = (RuleCall)cVariablesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_2_1_1_0 = (RuleCall)cVariablesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	name=[Function] "(" (variables+=Variable ("," variables+=Variable)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Function] "(" (variables+=Variable ("," variables+=Variable)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//name=[Function]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Function]
		public CrossReference getNameFunctionCrossReference_0_0() { return cNameFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getNameFunctionIDTerminalRuleCall_0_0_1() { return cNameFunctionIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(variables+=Variable ("," variables+=Variable)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0_0() { return cVariablesVariableParserRuleCall_2_0_0; }
		
		//("," variables+=Variable)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_2_1_1() { return cVariablesAssignment_2_1_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_1_1_0() { return cVariablesVariableParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final BrowserElements pBrowser;
	private final InstructionListElements pInstructionList;
	private final GotoElements pGoto;
	private final ClickElements pClick;
	private final FillElements pFill;
	private final CheckElements pCheck;
	private final PredicateElements pPredicate;
	private final PutElements pPut;
	private final VariableElements pVariable;
	private final ObjectElements pObject;
	private final HtmlElements pHtml;
	private final FunctionElements pFunction;
	private final FunctionCallElements pFunctionCall;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BotoLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pBrowser = new BrowserElements();
		this.pInstructionList = new InstructionListElements();
		this.pGoto = new GotoElements();
		this.pClick = new ClickElements();
		this.pFill = new FillElements();
		this.pCheck = new CheckElements();
		this.pPredicate = new PredicateElements();
		this.pPut = new PutElements();
		this.pVariable = new VariableElements();
		this.pObject = new ObjectElements();
		this.pHtml = new HtmlElements();
		this.pFunction = new FunctionElements();
		this.pFunctionCall = new FunctionCallElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.emn.fil.boto.BotoLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	functions+=Function*
	//	browsers+=Browser*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Browser:
	//	'browser' name=STRING '{'
	//	instructions=InstructionList
	//	'}';
	public BrowserElements getBrowserAccess() {
		return pBrowser;
	}
	
	public ParserRule getBrowserRule() {
		return getBrowserAccess().getRule();
	}
	
	//InstructionList:
	//	(instructions+=(Goto | Click | Check | Fill | Put | FunctionCall) ";")*;
	public InstructionListElements getInstructionListAccess() {
		return pInstructionList;
	}
	
	public ParserRule getInstructionListRule() {
		return getInstructionListAccess().getRule();
	}
	
	////////////////////
	//// Instructions //
	////////////////////
	//Goto:
	//	"goto" url=STRING;
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//Click:
	//	"click" object=Object;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Fill:
	//	"fill" object=Object "with" value=STRING;
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}
	
	//Check:
	//	"check" object=Object predicate=Predicate;
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//Predicate:
	//	keyword="contains" not="not"? (stringValue=STRING | variable=[Variable]) | keyword="length" secondKeyword=("=" | ">"
	//	| "<" | ">=" | "<=") value+=INT+;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Put:
	//	"put" (object=Object | string=STRING) "in" variable=Variable;
	public PutElements getPutAccess() {
		return pPut;
	}
	
	public ParserRule getPutRule() {
		return getPutAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Object:
	//	html=Html param=STRING | variable=[Variable];
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Html:
	//	tag=("button" | "field" | "link");
	public HtmlElements getHtmlAccess() {
		return pHtml;
	}
	
	public ParserRule getHtmlRule() {
		return getHtmlAccess().getRule();
	}
	
	////////////////////
	////   Functions  //
	////////////////////
	//Function:
	//	"def" name=ID "(" ((variables+=Variable ("," variables+=Variable)*)? ")" "{"
	//	instructions=InstructionList
	//	"}");
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//FunctionCall:
	//	name=[Function] "(" (variables+=Variable ("," variables+=Variable)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
