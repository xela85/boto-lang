/**
 * generated by Xtext 2.10.0
 */
package org.emn.fil.boto.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.emn.fil.boto.botoLang.Browser;
import org.emn.fil.boto.botoLang.Check;
import org.emn.fil.boto.botoLang.Click;
import org.emn.fil.boto.botoLang.Fill;
import org.emn.fil.boto.botoLang.Function;
import org.emn.fil.boto.botoLang.FunctionCall;
import org.emn.fil.boto.botoLang.Goto;
import org.emn.fil.boto.botoLang.Html;
import org.emn.fil.boto.botoLang.InstructionList;
import org.emn.fil.boto.botoLang.Model;
import org.emn.fil.boto.botoLang.Put;
import org.emn.fil.boto.botoLang.Variable;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BotoLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Model> _filter = Iterators.<Model>filter(_allContents, Model.class);
    final Model model = IteratorExtensions.<Model>head(_filter);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.emn.fil.boto.sample;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.firefox.FirefoxDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.support.ui.Select;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Sample {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    String text = _builder.toString();
    EList<Function> _functions = model.getFunctions();
    int _size = _functions.size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      String _text = text;
      EList<Function> _functions_1 = model.getFunctions();
      final Function1<Function, String> _function = (Function function) -> {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("private static void ");
        String _name = function.getName();
        _builder_1.append(_name, "");
        _builder_1.append("(WebDriver driver");
        {
          EList<Variable> _variables = function.getVariables();
          int _size_1 = _variables.size();
          boolean _greaterThan_1 = (_size_1 > 0);
          if (_greaterThan_1) {
            _builder_1.append(", ");
          }
        }
        EList<Variable> _variables_1 = function.getVariables();
        final Function1<Variable, String> _function_1 = (Variable it) -> {
          String _name_1 = it.getName();
          return ("Object " + _name_1);
        };
        List<String> _map = ListExtensions.<Variable, String>map(_variables_1, _function_1);
        final Function2<String, String, String> _function_2 = (String p1, String p2) -> {
          return ((p1 + ", ") + p2);
        };
        String _reduce = IterableExtensions.<String>reduce(_map, _function_2);
        _builder_1.append(_reduce, "");
        _builder_1.append(") {");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        InstructionList _instructions = function.getInstructions();
        String _transformInstructionList = this.transformInstructionList(_instructions);
        _builder_1.append(_transformInstructionList, "\t");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("}");
        _builder_1.newLine();
        return _builder_1.toString();
      };
      List<String> _map = ListExtensions.<Function, String>map(_functions_1, _function);
      final Function2<String, String, String> _function_1 = (String p1, String p2) -> {
        return ((p1 + "\n") + p2);
      };
      String _reduce = IterableExtensions.<String>reduce(_map, _function_1);
      text = (_text + _reduce);
    }
    String _text_1 = text;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("public static void main( String[] args ) throws InterruptedException {");
    _builder_1.newLine();
    _builder_1.append("\t\t    \t");
    _builder_1.append("System.setProperty(\"webdriver.gecko.driver\", \"C:\\\\Dev\\\\_soft\\\\selenium\\\\geckodriver.exe\");");
    _builder_1.newLine();
    _builder_1.append("\t\t    \t");
    _builder_1.append("System.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Dev\\\\_soft\\\\selenium\\\\chromedriver.exe\");");
    _builder_1.newLine();
    _builder_1.append("\t\t    \t");
    _builder_1.append("WebDriver driver;");
    _builder_1.newLine();
    text = (_text_1 + _builder_1);
    String _text_2 = text;
    EList<Browser> _browsers = model.getBrowsers();
    final Function1<Browser, String> _function_2 = (Browser browser) -> {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("driver = ");
      {
        String _name = browser.getName();
        boolean _equals = Objects.equal(_name, "Chrome");
        if (_equals) {
          _builder_2.append(" new ChromeDriver(); ");
        } else {
          _builder_2.append(" new FirefoxDriver(); ");
        }
      }
      _builder_2.newLineIfNotEmpty();
      InstructionList _instructions = browser.getInstructions();
      String _transformInstructionList = this.transformInstructionList(_instructions);
      _builder_2.append(_transformInstructionList, "");
      _builder_2.newLineIfNotEmpty();
      return _builder_2.toString();
    };
    List<String> _map_1 = ListExtensions.<Browser, String>map(_browsers, _function_2);
    final Function2<String, String, String> _function_3 = (String p1, String p2) -> {
      return ((p1 + "\n") + p2);
    };
    String _reduce_1 = IterableExtensions.<String>reduce(_map_1, _function_3);
    text = (_text_2 + _reduce_1);
    String _text_3 = text;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    text = (_text_3 + _builder_2);
    fsa.generateFile("fr/emn/fil/boto/sample/Sample.java", text);
  }
  
  public String transform(final EObject instruction) {
    String _xblockexpression = null;
    {
      if ((instruction instanceof Goto)) {
        final Goto goto_ = ((Goto) instruction);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("driver.get(\"");
        String _url = goto_.getUrl();
        _builder.append(_url, "");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        return _builder.toString();
      }
      if ((instruction instanceof Click)) {
        final Click click = ((Click) instruction);
        StringConcatenation _builder_1 = new StringConcatenation();
        org.emn.fil.boto.botoLang.Object _object = click.getObject();
        String _transformObject = this.transformObject(_object);
        _builder_1.append(_transformObject, "");
        _builder_1.append(".click();");
        _builder_1.newLineIfNotEmpty();
        return _builder_1.toString();
      }
      if ((instruction instanceof Fill)) {
        final Fill fill = ((Fill) instruction);
        StringConcatenation _builder_2 = new StringConcatenation();
        org.emn.fil.boto.botoLang.Object _object_1 = fill.getObject();
        String _transformObject_1 = this.transformObject(_object_1);
        _builder_2.append(_transformObject_1, "");
        _builder_2.append(".sendKeys(\"");
        String _value = fill.getValue();
        _builder_2.append(_value, "");
        _builder_2.append("\");");
        _builder_2.newLineIfNotEmpty();
        return _builder_2.toString();
      }
      if ((instruction instanceof Check)) {
        final Check check = ((Check) instruction);
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append("assert true;");
        _builder_3.newLine();
        return _builder_3.toString();
      }
      if ((instruction instanceof Put)) {
        final Put put = ((Put) instruction);
        String value = "";
        if ((Objects.equal(put.getString(), null) || put.getString().isEmpty())) {
          StringConcatenation _builder_4 = new StringConcatenation();
          org.emn.fil.boto.botoLang.Object _object_2 = put.getObject();
          String _transformObject_2 = this.transformObject(_object_2);
          _builder_4.append(_transformObject_2, "");
          _builder_4.newLineIfNotEmpty();
          value = _builder_4.toString();
        } else {
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("\"");
          String _string = put.getString();
          _builder_5.append(_string, "");
          _builder_5.append("\"");
          value = _builder_5.toString();
        }
        StringConcatenation _builder_6 = new StringConcatenation();
        _builder_6.append("Object ");
        Variable _variable = put.getVariable();
        String _name = _variable.getName();
        _builder_6.append(_name, "");
        _builder_6.append(" = ");
        _builder_6.append(value, "");
        _builder_6.append(";");
        _builder_6.newLineIfNotEmpty();
        return _builder_6.toString();
      }
      if ((instruction instanceof FunctionCall)) {
        final FunctionCall call = ((FunctionCall) instruction);
        StringConcatenation _builder_7 = new StringConcatenation();
        Function _name_1 = call.getName();
        String _name_2 = _name_1.getName();
        _builder_7.append(_name_2, "");
        _builder_7.append("(driver");
        {
          EList<Variable> _variables = call.getVariables();
          int _size = _variables.size();
          boolean _greaterThan = (_size > 0);
          if (_greaterThan) {
            _builder_7.append(", ");
          }
        }
        EList<Variable> _variables_1 = call.getVariables();
        final Function1<Variable, String> _function = (Variable it) -> {
          return it.getName();
        };
        List<String> _map = ListExtensions.<Variable, String>map(_variables_1, _function);
        final Function2<String, String, String> _function_1 = (String p1, String p2) -> {
          return ((p1 + ", ") + p2);
        };
        String _reduce = IterableExtensions.<String>reduce(_map, _function_1);
        _builder_7.append(_reduce, "");
        _builder_7.append(");");
        _builder_7.newLineIfNotEmpty();
        return _builder_7.toString();
      }
      _xblockexpression = "";
    }
    return _xblockexpression;
  }
  
  public String transformObject(final org.emn.fil.boto.botoLang.Object object) {
    String _xblockexpression = null;
    {
      final Html html = object.getHtml();
      boolean _equals = Objects.equal(html, null);
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("((WebElement) ");
        Variable _variable = object.getVariable();
        String _name = _variable.getName();
        _builder.append(_name, "");
        _builder.append(")");
        return _builder.toString();
      }
      String _xifexpression = null;
      String _tag = html.getTag();
      boolean _equals_1 = Objects.equal(_tag, "button");
      if (_equals_1) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("driver.findElement(By.cssSelector(\"input[value=\\\"");
        String _param = object.getParam();
        _builder_1.append(_param, "");
        _builder_1.append("\\\"]\"))");
        _xifexpression = _builder_1.toString();
      } else {
        String _xifexpression_1 = null;
        String _tag_1 = html.getTag();
        boolean _equals_2 = Objects.equal(_tag_1, "field");
        if (_equals_2) {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("driver.findElement(By.name(\"");
          String _param_1 = object.getParam();
          _builder_2.append(_param_1, "");
          _builder_2.append("\"))");
          _xifexpression_1 = _builder_2.toString();
        } else {
          String _xifexpression_2 = null;
          String _tag_2 = html.getTag();
          boolean _equals_3 = Objects.equal(_tag_2, "link");
          if (_equals_3) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("driver.findElement(By.linkText(\"");
            String _param_2 = object.getParam();
            _builder_3.append(_param_2, "");
            _builder_3.append("\"))");
            _xifexpression_2 = _builder_3.toString();
          } else {
            _xifexpression_2 = "null";
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String transformInstructionList(final InstructionList instructionList) {
    StringConcatenation _builder = new StringConcatenation();
    EList<EObject> _instructions = instructionList.getInstructions();
    final Function1<EObject, String> _function = (EObject i) -> {
      return this.transform(i);
    };
    List<String> _map = ListExtensions.<EObject, String>map(_instructions, _function);
    final Function2<String, String, String> _function_1 = (String p1, String p2) -> {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Thread.sleep(3000);");
      _builder_1.newLine();
      String _plus = (p1 + _builder_1);
      return (_plus + p2);
    };
    String _reduce = IterableExtensions.<String>reduce(_map, _function_1);
    _builder.append(_reduce, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
}
